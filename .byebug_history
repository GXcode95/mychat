c
page.has_css?('div.flash--error')
page.has_css?('.flash--error')
page.has_css?(.flash--error'
page.has_css?
page.inspect
page.text
page.methods
page.body
page
c
aa = ActionDispatch::Flash::FlashHash.new
aa
aa[:error] = "ok"
aa = ActionDispatch::Flash::FlashHash.new
ActionDispatch::Flash::FlashHash
aa
aa = ActionDispatch::Flash::FlashHash.new
flash.class
flash
c
flash
c
@flash.last
@flash.size
flash_type
message
@flash
flash
message
flash_type
c
message
flash_type
@flash.first
@flash.class
@flash.type
@flash
c
page.body
page
c
flash
c
flash
flash[:flashes]
flash.flashes
flash.instance_variables
flash
flash.methods
flash
flash[:type]
flash.type
flash
c!
c
can?(:read, @room)
c
can?(:read, @room)
can?(:update, @room)
@current_user.can?(:update, @room)
@user
@user.can?(:update, @room)
can?(:update, @room)
c
users_room_pending.
c
users_room.owner?
c
users_room.owner?
c
users_room.owner?
users_room
c
users_room
c
title
@users_rooms.size
@users_rooms
@users_roomd
c!
c
@users_room
@users_room.pending?
c
page.body
page
c
message.id
c
@message.id
c
message.id
c
message.id
c
message.id
c
@message.author&.id
@message.author
c
message.author
c
response.body.include?("<turbo-stream action=\"prepend\" target=\"rooms_members\">")
response.body
response.body.include?('<turbo-stream action="prepend" target="room_members">')
c
response.body
c!
mess.author
mess = Message.new(room_id: @message.room_id)
mess = MessageComponent.new(message: Message.new(room_id: @message.room_id))
@message.author
c!
c
room.users_rooms.last.user.id
room.users_rooms.first.user.id
c
users_room_owner.user.id
v
users_room_owner.user.id
c
self
room.users_rooms.pluck(:id)
room.users_rooms.size
c
users_room_owner.id
c
 room.users_rooms.size <= 2
room.nil? || room.is_public? 
roomroom.nil? || room.is_public? 
room
c
users_room_owner.id
users_room_owner.i
c!
c
room.users_rooms.size <= 2
room.users_rooms.size < 2
room.users_rooms.last.user.id
room.users_rooms.first.last.id
room.users_rooms.first.user.id
room.users_rooms
room.users
romm.users
c
member.id
other_user.id 
user.id
member.id
user.id
other_user.id
c
c!
c
room.users_rooms.size
room.users_rooms.size < 2
room.users_rooms.size
c
room.users_rooms.ids
romm.users_rooms.ids
c
users_room_owner.id
c
room.users_rooms.size
room.users_rooms
rom.users_rooms
c
room.users_rooms
room.users_rooms.size
c!
c
room.users_rooms.size
c
users_room.room.users_rooms.size
c!
c
@room.users_rooms.size
@room.users_rooms
@room.is_private
@room.errors.messages
@room.valid?
c
response
c
room.users_rooms.size < 2
c
room.users_rooms.size < 2
room.users_rooms.size
c
private_room.users_rooms.size
c
room.users_rooms
room.users_rooms.size < 2
c
private_room.users_rooms.size
private_room.users_rooms
c
private_room_user1.room.users_rooms
c
private_room_user1.room.users_rooms
private_room_user1.room.users_room
private_room_user1.room.save
private_room_user1.room
private_room_user1.save
private_room_user1.room.users_rooms
c
private_room_user1.room.users_rooms
private_room_user1.room
private_room.users_rooms
private_room
c
room.users_rooms
c
room.users_rooms
c
private_room
plop.room
plop.room.users_rooms
plop.room.users_room
private_room.users_rooms
c
private_room.users_rooms
c
private_room_users_room.room.users_rooms.size
private_room_users_room.room.users_rooms
private_room.users_rooms.size
private_room.users_rooms.user
private_room.users_rooms
private_room.users
return false
owner?
self.owner?
role
self
c
users_room_pending.role
users_room.role
c
users_room.role
c
message.room.owner?(user)
c
message.room.role_of(user)
message.room.role_of(message.author)
message.room
message.rooom
c
can?(:create, UsersRoom)
c
exit
self
request
params
users_room.reload
users_room;reload
