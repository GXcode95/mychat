c!
c
room.users_rooms.last.user.id
room.users_rooms.first.user.id
c
users_room_owner.user.id
v
users_room_owner.user.id
c
self
room.users_rooms.pluck(:id)
room.users_rooms.size
c
users_room_owner.id
c
 room.users_rooms.size <= 2
room.nil? || room.is_public? 
roomroom.nil? || room.is_public? 
room
c
users_room_owner.id
users_room_owner.i
c!
c
room.users_rooms.size <= 2
room.users_rooms.size < 2
room.users_rooms.last.user.id
room.users_rooms.first.last.id
room.users_rooms.first.user.id
room.users_rooms
room.users
romm.users
c
member.id
other_user.id 
user.id
member.id
user.id
other_user.id
c
c!
c
room.users_rooms.size
room.users_rooms.size < 2
room.users_rooms.size
c
room.users_rooms.ids
romm.users_rooms.ids
c
users_room_owner.id
c
room.users_rooms.size
room.users_rooms
rom.users_rooms
c
room.users_rooms
room.users_rooms.size
c!
c
room.users_rooms.size
c
users_room.room.users_rooms.size
c!
c
@room.users_rooms.size
@room.users_rooms
@room.is_private
@room.errors.messages
@room.valid?
c
response
c
room.users_rooms.size < 2
c
room.users_rooms.size < 2
room.users_rooms.size
c
private_room.users_rooms.size
c
room.users_rooms
room.users_rooms.size < 2
c
private_room.users_rooms.size
private_room.users_rooms
c
private_room_user1.room.users_rooms
c
private_room_user1.room.users_rooms
private_room_user1.room.users_room
private_room_user1.room.save
private_room_user1.room
private_room_user1.save
private_room_user1.room.users_rooms
c
private_room_user1.room.users_rooms
private_room_user1.room
private_room.users_rooms
private_room
c
room.users_rooms
c
room.users_rooms
c
private_room
plop.room
plop.room.users_rooms
plop.room.users_room
private_room.users_rooms
c
private_room.users_rooms
c
private_room_users_room.room.users_rooms.size
private_room_users_room.room.users_rooms
private_room.users_rooms.size
private_room.users_rooms.user
private_room.users_rooms
private_room.users
return false
owner?
self.owner?
role
self
c
users_room_pending.role
users_room.role
c
users_room.role
c
message.room.owner?(user)
c
message.room.role_of(user)
message.room.role_of(message.author)
message.room
message.rooom
c
can?(:create, UsersRoom)
c
exit
self
request
params
users_room.reload
users_room;reload
users_room
c
response.body
c
  response.should redirect_to(rooms_path)
  response.should redirect_to(room_path)
response
response.body
c
request.format
c
response.body
response/body
c
response.body
c
room_params
c
params
room_params
c
@room
@room.valid?
c
response.body
response.methods
c
@user = User.find(params[:user_id])
c
rooms_url
rooms_path
c
request
c
request
response
post('/rooms')
c
response
reponse
post('/rooms')
c
response.status
 post '/rooms', params: { room: {} }
response
post('/rooms')
post
c
room
c
room.size
room
c
exit
c
users.pluck(:id)
userspluck(:id)
users.ids
aa.first.users.ids
aa = private_rooms.
      select('rooms.*, COUNT(users_rooms.user_id)').
      joins(:users_rooms).
      where(users_rooms: { user_id: users.pluck(:id) }).
      group('rooms.id')
private_rooms.
      select('rooms.*, COUNT(users_rooms.user_id)').
      joins(:users_rooms).
      where(users_rooms: { user_id: users.pluck(:id) }).
      group('rooms.id')
c
room.ids
c
users.first.users_rooms.first.room.id
users.first.users_rooms.ids
users.first
c
room
c
user2.id
user1.id
room.first.users_rooms.pluck(:user_id)
room.first.users_rooms
room
user2.users_rooms
user2.users_room
user1.users_rooms
exit
public_room.users_rooms
public_room.users
public_room
public_room.users.first
users = [private_room.users.first, public_room.users.first]
users = private_room.users
Room.select('rooms.*, COUNT(users_rooms.user_id)').joins(:users_rooms).where(users_rooms: { user_id: users.pluck(:id) })
Room.select('rooms.*, COUNT(users_rooms.user_id)').joins(:users_rooms)
Room.select('rooms.*, COUNT(users_rooms.user_id)').joins(:users_rooms).
c
private_room.users.ids
Room.find(1200).users_rooms.first.id
Room.find(1200).users_rooms.first
Room.find(1200).users_rooms
Room.find(1200)
Room.private_rooms.ids
room.ids
c
room
c
x
room
c
users.first
users
users.size
