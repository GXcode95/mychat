c
     broadcast_replace_to("room_#{room.id}_show",
                           target: "panel_user_#{id}",
                           partial: 'users/panel_user',
                           locals: { user: self, current_user: room_user })
c
v
c
"user_#{room_user.id}"
 broadcast_replace_to("user_#{room_user.id}",
                             target: "panel_user_#{user.id}",
                             partial: 'users/panel_user',
                             locals: { user: user, current_user: room_user })
c
user.previous_changes[:status]
c
user.previous_changes[:status]
c
user.previous_changes[:status]
user.previous_changes
user.online
c
user.changes
c
ok
user.changes
c
user.changes
c
broadcast_replace_to
c
current_user
c
current_user
exit
Room.includes(:users_rooms).private_rooms.where(users_rooms: { user_id: 102208 })
Room.includes(:users_room).all
Room.includes(:users_rooms).all
Room.includes(:users_rooms).private_rooms.where(users_rooms: { user_id: 102208 })
Room.private_rooms.joins(:users_rooms).where(users_rooms: { user_id: 102208 })
Room.private_rooms.joinss(:users_rooms).where(users_rooms: { user_id: 102208 })
Room.private_rooms.includes(:users_rooms).where(users_rooms: { user_id: 102208 })
Room.private_rooms.includes(:users_rooms)
Room.private_rooms
private_room.users.ids
private_room.users
Room.by_users(user1, user2)
c
 broadcast_remove_to(:online_users, target: "panel-room-#{room.id}")
c
room.users_rooms
room
room.users
c!
c
exit
 Room.public_rooms.size
c
 Room.public_rooms.size
c
 Room.public_rooms.size
exit
c
Message.all.size
c
 Room.public_rooms.size
c
 Room.public_rooms.size
 Room.public_rooms
c
 Room.public_rooms
 Room.public_rooms.size
public_room.reload
 Room.public_rooms.size
public_room.reload
 Room.public_rooms.size
public_room.reload
 Room.public_rooms.size
c
private_room.users
public_room.users
c
public_room.reload.users
public_room.users
c
user1
exit
c
private_room.users_rooms
private_room.users
c
private_room.users_rooms.first.user.rooms
private_room.users_rooms.first.user
private_room.users
private_room.users_rooms
private_room.users
private_room.users_rooms.first.user
private_room.users_rooms
private_room.users
c
room.users
c
room.users
c
room.is_private
c
room.is_private
c
room.is_private
c
UsersRoom.all.ids.include?(private_users_room_member.id)
UsersRoom.all.ids
UsersRoom.all
private_users_room_member
private_room.users_rooms
private_users_room_member.room
private_users_room_member.room.id == private_room.id
private_users_room_member.room.id == private_romm.id
private_room.users_rooms
user1
c
user2
user1
c
user1
c
private_room.users
private_room.save
private_room.users_rooms.first.user.save
private_room.users
private_room.users_rooms.first.user
private_room.users_rooms.first
private_room.users
private_room.users_rooms
private_room.users_rooms.new(user: create(:user), status: 'accepted', role: 'member')
private_room
public_room.users
c
user1
c
room.users
romm.users
room.is_private?
exit
c
user1
c
user1
c
exit
private_room.id
urm.room
private_room.users_rooms
urm.save
urm;save
urm = create(:users_room_member, room: private_room)
create(:ur_m, room: private_room)
private_room.users_rooms.new(create(:users_room_member))
private_room.users_rooms
private_users_room_other_member.room.save
c
private_users_room_other_member.room.save
private_room
private_users_room_other_member.room.save
private_users_room_other_member.save
private_users_room_other_member.user.save
private_users_room_member.room.save
private_users_room_member.room
private_users_room_member.save
private_users_room_member.user.save
private_users_room_member.user
private_users_room_member
private_room.users_room
private_room
c
private_room.save
private_room.valid?
private_room
c
private
private_room.save
private_room.users_rooms
private_room.users
private_room.id
private_users_room_member.room.id
private_users_room_member.user
private_users_room_member.room
private_users_room_member.users_room
private_users_room_member.users_rooms
private_users_room_member
private_room.users_rooms
private_room
private_room.users
user1
user1, user2
c
room.users.size
room.users
c
UserChannel.broadcast_to(current_user, target: 'flash', partial: 'flash', locals: {flash: flash})
c
broadcast_remove_to 'panel-rooms', target: "panel-rooms-#{room.id}"
c
turbo_stream_action_tag :remove, targets: '.panels'
c
turbo_stream.remove '.panelx'
c
turbo_stream.remove 'panel'
= turbo_stream.remove 'panel'
c
turbo_stream_action_tag :remove, target: '.panel__section--public-rooms'
= turbo_stream_action_tag :remove, target: '.panel__section--public-rooms'
c
page.has_css?('div.flash--error')
page.has_css?('.flash--error')
page.has_css?(.flash--error'
page.has_css?
page.inspect
page.text
page.methods
page.body
page
c
aa = ActionDispatch::Flash::FlashHash.new
aa
aa[:error] = "ok"
aa = ActionDispatch::Flash::FlashHash.new
ActionDispatch::Flash::FlashHash
aa
aa = ActionDispatch::Flash::FlashHash.new
flash.class
flash
c
flash
c
@flash.last
@flash.size
flash_type
message
@flash
flash
message
flash_type
c
message
flash_type
@flash.first
@flash.class
@flash.type
@flash
c
page.body
page
c
flash
c
